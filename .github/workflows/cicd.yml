name: CI/CD Pipeline for Azure Databricks with DABs

on:
  workflow_dispatch:  # Manual triggering
  pull_request:
    branches:
      - main  # Trigger on PRs targeting main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Install Azure CLI
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      # Log in to Azure using Service Principal
      - name: Azure Login
        run: |
          az login --service-principal \
            -u ${{ secrets.CLIENTID }} \
            -p ${{ secrets.CLIENTSECRET }} \
            --tenant ${{ secrets.TENATID }}
          az account list --output table
        env:
          AZURE_CLIENT_ID: ${{ secrets.CLIENTID }}
          AZURE_CLIENT_SECRET: ${{ secrets.CLIENTSECRET }}
          AZURE_TENANT_ID: ${{ secrets.TENATID }}

      # Install dependencies and run pytest
      - name: Run Pytest
        run: |
          pip install -r requirements.txt
          echo "Listing directory structure:"
          ls -R src
          echo "Current PYTHONPATH: $PYTHONPATH"
          export PYTHONPATH=$PWD
          echo "Updated PYTHONPATH: $PYTHONPATH"
          pytest src/tests --verbose
        working-directory: .

      # Install Databricks CLI
      - name: Install Databricks CLI
        uses: databricks/setup-cli@main
      - name: Check for databricks.yml
        run: |
          echo "Listing .databricks/bundle directory:"
          ls -R .databricks/bundle
          if [ -f .databricks/bundle/databricks.yml ]; then
            echo "Found databricks.yml"
          else
            echo "Error: databricks.yml not found"
            exit 1
          fi
        working-directory: .

      # Validate Databricks Asset Bundle
      - name: Validate DAB
        run: |
          databricks bundle validate
        working-directory: .
        env:
          DATABRICKS_HOST: https://adb-1982449634857191.11.azuredatabricks.net
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

      # Deploy Databricks Asset Bundle (dev target)
      - name: Deploy DAB to Dev
        run: |
          databricks bundle deploy --target dev
        working-directory: .
        env:
          DATABRICKS_HOST: https://adb-1982449634857191.11.azuredatabricks.net
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

      # Run Databricks Job
      - name: Run DAB Job
        run: |
          databricks bundle run sample_job --refresh-all
        working-directory: .
        env:
          DATABRICKS_HOST: https://adb-1982449634857191.11.azuredatabricks.net
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

      # Verify or create Databricks repository
      - name: Verify or Create Databricks Repository
        id: get_repo_id
        run: |
          REPO_ID="4180936112745165"
          REPO_PATH="/Repos/infostar52701@gmail.com/sample-databricks-project"
          REPO_URL="https://github.com/<your-username>/sample-databricks-project"
          EXISTS=$(databricks repos list | grep -B 1 "$REPO_PATH" | grep '"id": '"$REPO_ID" || echo "")
          if [ -z "$EXISTS" ]; then
            echo "Repository ID $REPO_ID not found. Creating new repository..."
            REPO_ID=$(databricks repos create --url "$REPO_URL" --provider gitHub --path "$REPO_PATH" | grep -o '"repo_id": [0-9]\+' | grep -o '[0-9]\+')
            if [ -z "$REPO_ID" ]; then
              echo "Error: Failed to create repository"
              exit 1
            fi
            echo "Created repository with ID: $REPO_ID"
          else
            echo "Found repository with ID: $REPO_ID"
          fi
          echo "::set-output name=repo_id::$REPO_ID"
        env:
          DATABRICKS_HOST: https://adb-1982449634857191.11.azuredatabricks.net
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

      # Update Databricks Git folder
      - name: Update Databricks Git folder
        run: |
          databricks repos list
          databricks repos update --repo-id "$REPO_ID" --branch "$BRANCH"
        env:
          DATABRICKS_HOST: https://adb-1982449634857191.11.azuredatabricks.net
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
          REPO_ID: 4180936112745165
          BRANCH: ${{ steps.extract_branch.outputs.branch }}

      # Deploy notebooks to workspace
      - name: Deploy notebooks to workspace
        run: |
          databricks workspace import_dir notebooks /Shared/sample_project --overwrite
        env:
          DATABRICKS_HOST: https://adb-1982449634857191.11.azuredatabricks.net
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

      # Build and deploy Python wheel
      - name: Build and deploy wheel
        run: |
          pip install wheel
          python setup.py bdist_wheel
          databricks fs cp --overwrite dist/*.whl dbfs:/FileStore/libraries/sample_project-latest.whl
        working-directory: src
        env:
          DATABRICKS_HOST: https://adb-1982449634857191.11.azuredatabricks.net
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
